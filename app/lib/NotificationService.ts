import moment from 'moment'
import PushNotification, {
  PushNotification as IPushNotification,
  PushNotificationPermissions,
} from 'react-native-push-notification'
import { ObjectOf } from '../types/helpers';

export default class NotificationService {
  private lastId: number
  constructor(onRegister: any, onNotification: any) {
    this.configure(onRegister, onNotification)
    this.lastId = 0
  }
  private configure(
    onRegister: (token: {os: string, token: string}) => void,
    onNotification: (notification: IPushNotification) => void,
    senderID = '',
  ) {
    PushNotification.configure({
      // (optional) Called when Token is generated (iOS and Android)
      onRegister, // this._onRegister.bind(this),

      // (required) Called when a remote or local notification is opened or received
      onNotification, // this._onNotification,

      // ANDROID ONLY: GCM Sender ID (optional - not required for local notifications,
      //               but is need to receive remote push notifications)
      senderID,

      // IOS ONLY (optional): default: all - Permissions to register.
      permissions: {
        alert: true,
        badge: true,
        sound: true,
      },

      // Should the initial notification be popped automatically
      // default: true
      popInitialNotification: true,

      /**
       * (optional) default: true
       * - Specified if permissions (ios) and token (android and ios) will requested or not,
       * - if not, you must call PushNotificationsHandler.requestPermissions() later
       */
      requestPermissions: false,
    });
  }

  public localNotif() {
    this.lastId++;
    PushNotification.localNotification({
      /* Android Only Properties */
      id: this.lastId.toString(), // (optional) Valid unique 32 bit integer specified as
                                  // string. default: Autogenerated Unique ID
      ticker: 'My Notification Ticker', // (optional)
      autoCancel: true, // (optional) default: true
      largeIcon: 'ic_launcher', // (optional) default: 'ic_launcher'
      // (optional) default: 'ic_notification' with fallback for 'ic_launcher'
      smallIcon: 'ic_notification',
      // (optional) default: 'message' prop
      bigText: 'My big text that will be shown when notification is expanded',
      subText: 'This is a subText', // (optional) default: none
      color: 'red', // (optional) default: system default
      vibrate: true, // (optional) default: true
      vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      tag: 'some_tag', // (optional) add tag to message
      group: 'group', // (optional) add group to message
      ongoing: false, // (optional) set whether this is an 'ongoing' notification

      /* iOS only properties */
      alertAction: 'view', // (optional) default: view
      category: null, // (optional) default: null
      userInfo: null, // (optional) default: null (object containing additional notification data)

      /* iOS and Android properties */
      title: 'Local Notification', // (optional)
      message: 'My Notification Message', // (required)
      playSound: false, // (optional) default: true
      soundName: 'default', // (optional) Sound to play when the notification is shown.
                            // Value of 'default' plays the default sound. It can be set
                            // to a custom sound such as 'android.resource://com.xyz/raw/my_sound'.
                            // It will look for the 'my_sound' audio file in 'res/raw' directory and
                            // play it. default: 'default' (default sound is played)
      // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
      number: '10',
      actions: "['Yes', 'No']",  // (Android only) See the doc for notification actions to know more
    });
  }

  public scheduleNotif() {
    this.lastId++;
    PushNotification.localNotificationSchedule({
      date: new Date(Date.now() + (30 * 1000)), // in 30 secs

      /* Android Only Properties */
      // (optional) Valid unique 32 bit integer specified
      // as string. default: Autogenerated Unique ID
      id: this.lastId.toString(),
      ticker: 'My Notification Ticker', // (optional)
      autoCancel: true, // (optional) default: true
      largeIcon: 'ic_launcher',// (optional) default: 'ic_launcher'
      // (optional) default: 'ic_notification' with fallback for 'ic_launcher'
      smallIcon: 'ic_notification',
      // (optional) default: 'message' prop
      bigText: 'My big text that will be shown when notification is expanded',
      subText: 'This is a subText', // (optional) default: none
      color: 'blue', // (optional) default: system default
      vibrate: true, // (optional) default: true
      vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      tag: 'some_tag', // (optional) add tag to message
      group: 'group', // (optional) add group to message
      ongoing: false, // (optional) set whether this is an 'ongoing' notification

      /* iOS only properties */
      alertAction: 'view', // (optional) default: view
      category: null, // (optional) default: null
      userInfo: null, // (optional) default: null (object containing additional notification data)

      /* iOS and Android properties */
      title: 'Scheduled Notification', // (optional)
      message: 'My Notification Message', // (required)
      playSound: true, // (optional) default: true
      soundName: 'default', // (optional) Sound to play when the notification is shown.
                            // Value of 'default' plays the default sound. It can be set to a
                            // custom sound such as 'android.resource://com.xyz/raw/my_sound'.
                            // It will look for the 'my_sound' audio file in 'res/raw' directory
                            // and play it. default: 'default' (default sound is played)
    });
  }

  public checkPermission(cbk: (permissions: PushNotificationPermissions) => void) {
    return PushNotification.checkPermissions(cbk);
  }

  public cancelNotif() {
    PushNotification.cancelLocalNotifications({ id: this.lastId.toString() });
  }

  public cancelAll() {
    PushNotification.cancelAllLocalNotifications();
  }
}

presentLocalNotification('INITIALIZING')
export function presentLocalNotification(message: string) {
  PushNotification.presentLocalNotification({
    message,
  })
}

export function scheduleLocalNotification(message: string, date: Date, id: any, payload: ObjectOf<any>) {
  // message: type String
  // date: type String  format 'YYYY-MM-DD HH:mm' (NOTIFICATION_DATE_TIME_FORMAT)

  // construct the notification parameters
  const fireDate = moment(date, 'YYYY-MM-DD HH:mm').toDate();
  const notification = {
    message,
    id: createPushId(id), // for android cancel notification (must be stringified number)
    number: '0', // necessary for iOS cancellation (not sure why)
    date: fireDate,
    // for ios only
    userInfo: {
      id: createPushId(id), // for ios cancel notfication (can be any string)
      ...payload,
    },
    // for android only
    data: JSON.stringify(payload),
  };

  // schedule the notification
  PushNotification.localNotificationSchedule(notification);
}

export function createPushId(pushType: string) {
  return NOTIFICATION_TYPE_TO_ID[pushType];
}

export const NOTIFICATION_TYPE_TO_ID: ObjectOf<string> = {
  waiting: '000', // someone is waiting on you to swipe!
  match: '001', // %s matched with you! invite her on a date now!
  date_invite: '002', // You've been invited on a Date!
  date_soon: '003', // Your date with %s is soon!
  cheat_sheet: '004', // Looks like your approaching %venue. Here is a cheat sheet to remind you a little about %s
  code_available: '005', // Looks like you and %s made it! here's a shortcut to the discount!
                         // Keep this notification as a reminder to pay attention on your date.
                         // it will be here for you when your ready to pay!
  date_feedback: '006', // Good Morning! how was your date with %s last night?

  chat_text: '100', // %t || %s sent you a message
  chat_image: '101', // %s sent you an image
  chat_video: '102', // %s sent you a video
  chat_location: '103', // %s sent you their location

  call_audio_calling: '200', // Receiving audio call from %s
  call_audio_missed: '201', // Missed audio call from %s
  call_video_calling: '202', // Recieving video call from %s
  call_video_missed: '203', // Missed video call from %s

  significant_other_request: '900',
  event: '901',
  special_deal: '902',
  surge: '903',
};
